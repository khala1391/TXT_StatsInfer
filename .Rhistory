ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
labs(title = paste("Ratio of np to np(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (np(1-p))") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot the ratio for the given value of n
plot_ratio(n)
plot_ratio_log <- function(n) {
# Generate values for p from 0.01 to 0.99
p_values <- seq(0.01, 0.99, by = 0.01)
# Calculate np and np(1-p) for each p
np <- n * p_values
npq <- n * p_values * (1 - p_values)
# Calculate the ratio np/(np(1-p))
ratio <- np / npq
# Data frame for plotting
df <- data.frame(
p = p_values,
Ratio = ratio
)
# Plotting with log scale for y-axis
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
scale_y_log10() +
labs(title = paste("Ratio of np to np(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (np(1-p)) (log scale)") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot the ratio with log scale for the given value of n
plot_ratio_log(n)
plot_ratio_limit <- function(n) {
# Generate values for p from 0.01 to 0.99
p_values <- seq(0.01, 0.99, by = 0.01)
# Calculate np and np(1-p) for each p
np <- n * p_values
npq <- n * p_values * (1 - p_values)
# Calculate the ratio np/(np(1-p))
ratio <- np / npq
# Data frame for plotting
df <- data.frame(
p = p_values,
Ratio = ratio
)
# Plotting with y-axis limits
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
ylim(0, 10) +  # Set y-axis limits to a reasonable range
labs(title = paste("Ratio of np to np(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (np(1-p))") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot the ratio with y-axis limits for the given value of n
plot_ratio_limit(n)
# Plotting with y-axis limits
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
ylim(-5, 10) +  # Set y-axis limits to a reasonable range
labs(title = paste("Ratio of np to np(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (np(1-p))") +
theme_minimal()
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
ylim(-5, 10) +  # Set y-axis limits to a reasonable range
labs(title = paste("Ratio of np to np(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (np(1-p))") +
theme_minimal()
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
ylim(-5, 10) +  # Set y-axis limits to a reasonable range
labs(title = paste("Ratio of np to np(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (np(1-p))") +
theme_minimal()
plot_ratio_limit <- function(n) {
# Generate values for p from 0.01 to 0.99
p_values <- seq(0.01, 0.99, by = 0.01)
# Calculate np and np(1-p) for each p
np <- n * p_values
npq <- n * p_values * (1 - p_values)
# Calculate the ratio np/(np(1-p))
ratio <- np / npq
# Data frame for plotting
df <- data.frame(
p = p_values,
Ratio = ratio
)
# Plotting with y-axis limits
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
ylim(-0.5, 10) +  # Set y-axis limits to a reasonable range
labs(title = paste("Ratio of np to np(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (np(1-p))") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot the ratio with y-axis limits for the given value of n
plot_ratio_limit(n)
plot_ratio_limit <- function(n) {
# Generate values for p from 0.01 to 0.99
p_values <- seq(0.01, 0.99, by = 0.01)
# Calculate np and np(1-p) for each p
np <- n * p_values
npq <- n * p_values * (1 - p_values)
# Calculate the ratio np/(np(1-p))
ratio <- np / npq
# Data frame for plotting
df <- data.frame(
p = p_values,
Ratio = ratio
)
# Plotting with detailed y-axis ticks
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
scale_y_continuous(
limits = c(-0.5, 10),
breaks = seq(-0.5, 10, by = 0.5)  # Detailed tick marks every 0.5 units
) +
labs(title = paste("Ratio of np to np(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (np(1-p))") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot the ratio with detailed y-axis ticks for the given value of n
plot_ratio_detail_ticks(n)
# Function to plot the ratio np/(np(1-p)) against p with detailed y-axis ticks
plot_ratio_detail_ticks <- function(n) {
# Generate values for p from 0.01 to 0.99
p_values <- seq(0.01, 0.99, by = 0.01)
# Calculate np and np(1-p) for each p
np <- n * p_values
npq <- n * p_values * (1 - p_values)
# Calculate the ratio np/(np(1-p))
ratio <- np / npq
# Data frame for plotting
df <- data.frame(
p = p_values,
Ratio = ratio
)
# Plotting with detailed y-axis ticks
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
scale_y_continuous(
limits = c(-0.5, 10),
breaks = seq(-0.5, 10, by = 0.5)  # Detailed tick marks every 0.5 units
) +
labs(title = paste("Ratio of np to np(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (np(1-p))") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot the ratio with detailed y-axis ticks for the given value of n
plot_ratio_detail_ticks(n)
plot_ratio_detail_ticks <- function(n) {
# Generate values for p from 0.01 to 0.99
p_values <- seq(0.01, 0.99, by = 0.01)
# Calculate np and np(1-p) for each p
np <- n * p_values
npq <- n * (1 - p_values)
# Calculate the ratio np/(np(1-p))
ratio <- np / npq
# Data frame for plotting
df <- data.frame(
p = p_values,
Ratio = ratio
)
# Plotting with detailed y-axis ticks
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
scale_y_continuous(
limits = c(-0.5, 10),
breaks = seq(-0.5, 10, by = 0.5)  # Detailed tick marks every 0.5 units
) +
labs(title = paste("Ratio of np to np(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (np(1-p))") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot the ratio with detailed y-axis ticks for the given value of n
plot_ratio_detail_ticks(n)
library(ggplot2)
# Function to plot the ratio np/(n(1-p)) against p with detailed y-axis ticks
plot_ratio_detail_ticks <- function(n) {
# Generate values for p from 0.01 to 0.99 (excluding 0 and 1 to avoid division by zero)
p_values <- seq(0.01, 0.99, by = 0.01)
# Calculate np and n(1-p) for each p
np <- n * p_values
n1_p <- n * (1 - p_values)
# Calculate the ratio np/(n(1-p))
ratio <- np / n1_p
# Data frame for plotting
df <- data.frame(
p = p_values,
Ratio = ratio
)
# Plotting with detailed y-axis ticks
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
scale_y_continuous(
limits = c(-0.5, 10),  # Setting y-axis limits
breaks = seq(-0.5, 10, by = 0.5)  # Detailed tick marks every 0.5 units
) +
labs(title = paste("Ratio of np to n(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (n(1-p))") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot the ratio with detailed y-axis ticks for the given value of n
plot_ratio_detail_ticks(n)
# Function to plot the ratio np/(n(1-p)) against p with detailed y-axis ticks
plot_ratio_detail_ticks <- function(n) {
# Generate values for p from 0.01 to 0.99 (excluding 0 and 1 to avoid division by zero)
p_values <- seq(0.01, 0.99, by = 0.01)
# Calculate np and n(1-p) for each p
np <- n * p_values
n1_p <- n * (1 - p_values)
# Calculate the ratio np/(n(1-p))
ratio <- np / n1_p
# Data frame for plotting
df <- data.frame(
p = p_values,
Ratio = ratio
)
# Plotting with detailed y-axis ticks
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
scale_y_continuous(
limits = c(-0.5, 10),  # Setting y-axis limits
breaks = seq(-0.5, 10, by = 0.5)  # Detailed tick marks every 0.5 units
) +
labs(title = paste("Ratio of np to n(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (n(1-p))") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot the ratio with detailed y-axis ticks for the given value of n
plot_ratio_detail_ticks(n)
plot_binomial_normal <- function(n, p) {
q <- 1 - p
mean <- n * p
sd <- sqrt(n * p * q)
# Generate binomial probabilities
x <- 0:n
binom_probs <- dbinom(x, size = n, prob = p)
# Generate normal approximation
normal_approx <- dnorm(x, mean = mean, sd = sd)
# Data frame for plotting
df <- data.frame(
x = rep(x, 2),
Probability = c(binom_probs, normal_approx),
Distribution = rep(c("Binomial", "Normal Approximation"), each = length(x))
)
# Plotting
ggplot(df, aes(x = x, y = Probability, color = Distribution)) +
geom_line(size = 1) +
labs(title = paste("Binomial vs Normal Approximation (n =", n, ", p =", p, ")"),
x = "Number of Successes",
y = "Probability") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot for different values of p
plot_binomial_normal(n, p = 0.1)
plot_binomial_normal(n, p = 0.3)
plot_binomial_normal(n, p = 0.5)
plot_binomial_normal(n, p = 0.7)
plot_binomial_normal(n, p = 0.9)
library(ggplot2)
# Function to plot the ratio np/(np(1-p)) against p with a log scale y-axis
plot_ratio_log <- function(n) {
# Generate values for p from 0.01 to 0.99
p_values <- seq(0.01, 0.99, by = 0.01)
# Calculate np and np(1-p) for each p
np <- n * p_values
npq <- n * p_values * (1 - p_values)
# Calculate the ratio np/(np(1-p))
ratio <- np / npq
# Data frame for plotting
df <- data.frame(
p = p_values,
Ratio = ratio
)
# Plotting with log scale for y-axis
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
scale_y_log10() +
labs(title = paste("Ratio of np to np(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (np(1-p)) (log scale)") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot the ratio with log scale for the given value of n
plot_ratio_log(n)
plot_ratio_detail_ticks <- function(n) {
# Generate values for p from 0.01 to 0.99 (excluding 0 and 1 to avoid division by zero)
p_values <- seq(0.01, 0.99, by = 0.01)
# Calculate np and n(1-p) for each p
np <- n * p_values
n1_p <- n * (1 - p_values)
# Calculate the ratio np/(n(1-p))
ratio <- np / n1_p
# Data frame for plotting
df <- data.frame(
p = p_values,
Ratio = ratio
)
# Plotting with detailed y-axis ticks
ggplot(df, aes(x = p, y = Ratio)) +
geom_line(size = 1, color = "blue") +
geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
scale_y_continuous(
limits = c(-0.5, 10),  # Setting y-axis limits
breaks = seq(-0.5, 10, by = 0.5)  # Detailed tick marks every 0.5 units
) +
labs(title = paste("Ratio of np to n(1-p) for n =", n),
x = "Probability of Success (p)",
y = "Ratio np / (n(1-p))") +
theme_minimal()
}
# Set number of trials
n <- 30
# Plot the ratio with detailed y-axis ticks for the given value of n
plot_ratio_detail_ticks(n)
p <- 0.5
ns <- c(1, 2,5,10,20)
# Calculate P(X = 0) = (1 - p)^n for each n
results <- data.frame(n = ns, P_X_0 = (1 - p)^ns)
# Plot on a linear scale
linear_plot <- ggplot(results, aes(x = n, y = P_X_0)) +
geom_point() +
geom_line() +
labs(title = "P(X = 0) on Linear Scale",
x = "Number of Trials (n)",
y = "P(X = 0)") +
theme_minimal()
# Plot on a logarithmic scale
log_plot <- ggplot(results, aes(x = n, y = P_X_0)) +
geom_point() +
geom_line() +
scale_y_log10() +
labs(title = "P(X = 0) on Log Scale",
x = "Number of Trials (n)",
y = "P(X = 0) (Log Scale)") +
theme_minimal()
# Combine the plots using patchwork
linear_plot + log_plot + plot_layout(ncol = 1)
library(ggplot2)
library(patchwork)
# Define the parameters
p <- 0.5
ns <- c(1, 2,5,10,20)
# Calculate P(X = 0) = (1 - p)^n for each n
results <- data.frame(n = ns, P_X_0 = (1 - p)^ns)
# Plot on a linear scale
linear_plot <- ggplot(results, aes(x = n, y = P_X_0)) +
geom_point() +
geom_line() +
labs(title = "P(X = 0) on Linear Scale",
x = "Number of Trials (n)",
y = "P(X = 0)") +
theme_minimal()
# Plot on a logarithmic scale
log_plot <- ggplot(results, aes(x = n, y = P_X_0)) +
geom_point() +
geom_line() +
scale_y_log10() +
labs(title = "P(X = 0) on Log Scale",
x = "Number of Trials (n)",
y = "P(X = 0) (Log Scale)") +
theme_minimal()
# Combine the plots using patchwork
linear_plot + log_plot + plot_layout(ncol = 1)
clt<-function(pop,n){
xbar<-c()
for(i in 1:1000){
samp<-sample(pop,n)
xbar<-c(xbar,mean(samp))
}
m<-round(mean(xbar),2)
s<-round(sd(xbar),2)
main=paste("n=",n,", mean=",m,", sd=",s,sep="")
hist(xbar,main=main)
}
par(mfrow=c(4,4))
pop<-rnorm(1000)
m=round(mean(pop),2)
s=round(sd(pop),2)
main=paste("Pop, Normal", ", mean=",m,", sd=",s,sep="")
hist(pop,main=main)
clt(pop,10)
clt(pop,30)
clt(pop,50)
pop<-runif(1000)
m=round(mean(pop),2)
s=round(sd(pop),2)
main=paste("Pop, Uniform", ", mean=",m,", sd=",s,sep="")
hist(pop,main=main)
clt(pop,10)
clt(pop,30)
clt(pop,50)
pop<-rexp(1000)
m=round(mean(pop),2)
s=round(sd(pop),2)
main=paste("Pop, Exponential", ", mean=",m,", sd=",s,sep="")
hist(pop,main=main)
clt(pop,10)
clt(pop,30)
clt(pop,50)
pop<-rbeta(1000,.5,.3)
m=round(mean(pop),2)
s=round(sd(pop),2)
main=paste("Pop, Beta", ", mean=",m,", sd=",s,sep="")
hist(pop,main=main)
clt(pop,10)
clt(pop,30)
clt(pop,50)
pnorm(-1.5)
pnorm(-1.5)
dbinom(3,15,0.2)  #P(X=x)  >>f
bulb  <- sampe(800,900,40)
bulb  <- sample(800,900,40)
bulb
bulb  <- sample(800:900,40)
bulb
mean(bulb) + c(-1,1)*1.96(45)/sqrt(40)  # obtain UB,LB
mean(bulb) + c(-1,1)*1.96(45)/sqrt(40)  # obtain UB,LB
bulb  <- c(sample(800:900,40))
mean(bulb) + c(-1,1)*1.96(45)/sqrt(40)  # obtain UB,LB
bulb  <- as.vector(sample(800:900,40))
mean(bulb) + c(-1,1)*1.96(45)/sqrt(40)  # obtain UB,LB
mean(bulb)
mean(bulb) + c(-1,1)*1.96*(45)/sqrt(40)  # obtain UB,LB
bulb  <- sample(800:900,40))
mean(bulb) + c(-1,1)*1.96*(45)/sqrt(40)  # obtain UB,LB
bulb  <- sample(800:900,40)
mean(bulb) + c(-1,1)*1.96*(45)/sqrt(40)  # obtain UB,LB
mean(bulb)
bulb  <- sample(800:700,40)
mean(bulb) + c(-1,1)*1.96*(45)/sqrt(40)  # obtain UB,LB
mean(bulb)
sd(bulb)
# return area
qnorm(0.95) #CI=90%
qnorm(0.975) #CI=95%
qnorm(0.995) #CI=99%
mean(bulb) + c(-1,1)*qnorm(0.95)*(45)/sqrt(40)  #CI=90%
mean(bulb) + c(-1,1)*qnorm(0.975)*(45)/sqrt(40)  #CI=95%
mean(bulb) + c(-1,1)*qnorm(0.995)*(45)/sqrt(40)  #CI=99%
qnorm(0.975)
dnorm(1.959964)
dnorm>
d
dnorm?
efdf
dnorm?
dnorm(1.959964) #0.05844507   ~ prob at x =
dnorm?
# L17 hypothesis test, sampling proportion -------------
#L17
binom.test(x=18,n=20,p=0.7,alternative = "greater")
dnorm?
help(dnorm
)
help(dnorm
)
qnorm(0.975)  # 1.959964    ~ quantile function
pnorm(1.959964)
# return CI
pnorm(1.644854) #CI=90%
# return CI
pnorm(1.644854) #CI=90%
pnorm(1.959964) #CI=95%
choose(4,2)
